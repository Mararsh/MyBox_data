package mara.mybox.db;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import mara.mybox.data.GeographyCode;
import mara.mybox.data.GeographyCodeLevel;
import static mara.mybox.db.DerbyBase.dbHome;
import static mara.mybox.db.DerbyBase.failed;
import static mara.mybox.db.DerbyBase.login;
import static mara.mybox.db.DerbyBase.protocol;
import mara.mybox.value.AppVariables;
import static mara.mybox.value.AppVariables.logger;

/**
 * @Author Mara
 * @CreateDate 2020-2-3
 * @License Apache License Version 2.0
 */
public class TableGeographyCode extends DerbyBase {

    public static final String Create_Index_levelIndex
            = " CREATE INDEX  Geography_Code_level_index on Geography_Code ( "
            + "  level, continent, country ,province ,city ,county ,town , village , building "
            + " )";

    public static final String Create_Index_gcidIndex
            = " CREATE INDEX  Geography_Code_gcid_index on Geography_Code ( "
            + "  gcid DESC, level, continent, country ,province ,city ,county ,town , village , building "
            + " )";

    public static final String AllQeury
            = "SELECT * FROM Geography_Code ORDER BY gcid";

    public static final String PageQeury
            = "SELECT * FROM Geography_Code ORDER BY gcid "
            + " OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";

    public static final String GCidQeury
            = "SELECT * FROM Geography_Code WHERE gcid=?";

    public static final String NameEqual
            = "( chinese_name IS NOT NULL AND LCASE(chinese_name)=? ) OR "
            + " ( english_name IS NOT NULL AND LCASE(english_name)=? ) OR "
            + " ( alias1 IS NOT NULL AND LCASE(alias1)=? ) OR "
            + " ( alias2 IS NOT NULL AND LCASE(alias2)=? ) OR "
            + " ( alias3 IS NOT NULL AND LCASE(alias3)=? ) OR "
            + " ( alias4 IS NOT NULL AND LCASE(alias4)=? ) OR "
            + " ( alias5 IS NOT NULL AND LCASE(alias5)=? )";

    public static final String LevelNameEqual
            = "level=? AND  ( " + NameEqual + " )";

    public static final String LevelNameQeury
            = "SELECT * FROM Geography_Code WHERE " + LevelNameEqual;

    public static final String CoordinateQeury
            = "SELECT * FROM Geography_Code WHERE longitude=? AND latitude=?";

    public static final String MaxLevelGCidQuery
            = "SELECT max(gcid) FROM Geography_Code WHERE level=?";

    public static final String GCidExistedQuery
            = "SELECT gcid FROM Geography_Code where gcid=?";

    public static final String MaxGCidQuery
            = "SELECT max(gcid) FROM Geography_Code";

    public static final String Update
            = "UPDATE Geography_Code SET "
            + " level=?, longitude=?, latitude=?, predefined=?, chinese_name=?, english_name=?, "
            + " code1=?, code2=?, code3=?, code4=?, code5=?,alias1=?, alias2=?, alias3=?, alias4=?, alias5=?, "
            + " area=?, population=?, comments=?, "
            + " continent=?, country=?, province=? , city=?, county=?, town=?, village=? , building=? "
            + " WHERE gcid=?";

    public static final String Insert
            = "INSERT INTO Geography_Code( "
            + " gcid, level, predefined, longitude, latitude, chinese_name, english_name,"
            + " code1, code2, code3,  code4, code5, alias1, alias2, alias3, alias4, alias5, "
            + " area, population, comments,"
            + " continent, country, province, city, county, town, village, building) "
            + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? ) ";

    public static final String Delete
            = "DELETE FROM Geography_Code WHERE gcid=?";

    /**
     * One of following can determine an address:
     * 1. gcid. This is accurate matching.
     * 2. level + chinese_name/english_name/alias + ancestors. This is accurate matching.
     * 3. level + chinese_name/english_name/alias. This is fuzzy matching. Duplaited names can happen.
     *
     * Notice: coordinate can not determine an address
     *
     * Extra information, like higher level attribuets, can avoid wrong loop-up due to duplicated names.
     * Example, 2 cities have same name "A" while they have different country names, then distinct them by appending country name.
     */
    public TableGeographyCode() {
        Table_Name = "Geography_Code";
        Keys = new ArrayList<>() {
            {
                add("gcid");
            }
        };
        Create_Table_Statement
                = " CREATE TABLE Geography_Code ( "
                + "  gcid BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), "
                + "  predefined SMALLINT NOT NULL, " // 1: yes
                + "  level SMALLINT NOT NULL, " // global/continent/country/province(state)/city/county(region/district)/town/village/building
                + "  longitude DOUBLE NOT NULL, "
                + "  latitude DOUBLE NOT NULL, "
                + "  chinese_name VARCHAR(1028), "
                + "  english_name VARCHAR(1028), "
                + "  code1 VARCHAR(16), "
                + "  code2 VARCHAR(16), "
                + "  code3 VARCHAR(16), "
                + "  code4 VARCHAR(16), "
                + "  code5 VARCHAR(16), "
                + "  alias1 VARCHAR(1028), "
                + "  alias2 VARCHAR(1028), "
                + "  alias3 VARCHAR(1028), "
                + "  alias4 VARCHAR(1028), "
                + "  alias5 VARCHAR(1028), "
                + "  area BIGINT, " // km2
                + "  population BIGINT, "
                // below are references to build relationships among codes
                + "  continent BIGINT, "
                + "  country BIGINT, "
                + "  province BIGINT, " // or state
                + "  city BIGINT, "
                + "  county BIGINT, " // or region/district
                + "  town BIGINT, " // or street
                + "  village BIGINT, " //  or neighborhood
                + "  building BIGINT, "
                + "  comments VARCHAR(32672), "
                + "  PRIMARY KEY (gcid)"
                + " )";
    }

    public void initData() {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.createStatement().executeUpdate("DROP TABLE " + Table_Name);
            conn.createStatement().executeUpdate(Create_Table_Statement);
            logger.debug(Create_Table_Statement);
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return;
        }
        GeographyCode.predefined();
    }

    public static int size() {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setReadOnly(true);
            final String sql = " SELECT count(gcid) FROM Geography_Code";
            return size(conn, sql);
        } catch (Exception e) {
            failed(e);
            return 0;
        }
    }

    public static boolean validCoordinate(double longitude, double latitude) {
        return longitude >= -180 && longitude <= 180
                && latitude >= -90 && latitude <= 90;
    }

    public static boolean validCoordinate(GeographyCode code) {
        return code.getLongitude() >= -180 && code.getLongitude() <= 180
                && code.getLatitude() >= -90 && code.getLatitude() <= 90;
    }

    public static void setNameParameters(PreparedStatement statement, String name, int fromIndex) {
        if (statement == null || name == null || fromIndex < 0) {
            return;
        }
        try {
            String lname = name.toLowerCase();
            statement.setString(fromIndex + 1, lname);
            statement.setString(fromIndex + 2, lname);
            statement.setString(fromIndex + 3, lname);
            statement.setString(fromIndex + 4, lname);
            statement.setString(fromIndex + 5, lname);
            statement.setString(fromIndex + 6, lname);
            statement.setString(fromIndex + 7, lname);
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
        }
    }

    public static String nameEqual(String value) {
        String v = stringValue(value).toLowerCase();
        return "  ( chinese_name IS NOT NULL AND LCASE(chinese_name)='" + v + "' ) OR "
                + " ( english_name IS NOT NULL AND LCASE(english_name)='" + v + "' ) OR "
                + " ( alias1 IS NOT NULL AND LCASE(alias1)='" + v + "' ) OR "
                + " ( alias2 IS NOT NULL AND LCASE(alias2)='" + v + "' ) OR "
                + " ( alias3 IS NOT NULL AND LCASE(alias3)='" + v + "' ) OR "
                + " ( alias4 IS NOT NULL AND LCASE(alias4)='" + v + "' ) OR "
                + " ( alias5 IS NOT NULL AND LCASE(alias5)='" + v + "' ) ";
    }

    public static String codeEqual(GeographyCode code) {
        if (code.getGcid() > 0) {
            return "gcid=" + code.getGcid();
        }
        int level = code.getLevel();
        String s = "level=" + level;
        switch (level) {
            case 3:
                s += " AND continent=" + code.getContinent();
                break;
            case 4:
                s += " AND continent=" + code.getContinent()
                        + " AND country=" + code.getCountry();
                break;
            case 5:
                s += " AND continent=" + code.getContinent()
                        + " AND country=" + code.getCountry()
                        + " AND province=" + code.getProvince();
                break;
            case 6:
                s += " AND continent=" + code.getContinent()
                        + " AND country=" + code.getCountry()
                        + " AND province=" + code.getProvince()
                        + " AND city=" + code.getCity();
                break;
            case 7:
                s += " AND country=" + code.getCountry()
                        + " AND province=" + code.getProvince()
                        + " AND city=" + code.getCity()
                        + " AND county=" + code.getCounty();
                break;
            case 8:
                s += " AND continent=" + code.getContinent()
                        + " AND country=" + code.getCountry()
                        + " AND province=" + code.getProvince()
                        + " AND city=" + code.getCity()
                        + " AND county=" + code.getCounty()
                        + " AND town=" + code.getTown();
                break;
            case 9:
            case 10:
                s += " AND continent=" + code.getContinent()
                        + " AND country=" + code.getCountry()
                        + " AND province=" + code.getProvince()
                        + " AND city=" + code.getCity()
                        + " AND county=" + code.getCounty()
                        + " AND town=" + code.getTown()
                        + " AND village=" + code.getVillage();
                break;
        }

        if (code.getChineseName() != null) {
            String name = stringValue(code.getChineseName()).toLowerCase();
            s += " AND  ( ( chinese_name IS NOT NULL AND LCASE(chinese_name)='" + name + "' ) OR "
                    + " ( alias1 IS NOT NULL AND LCASE(alias1)='" + name + "' ) OR "
                    + " ( alias2 IS NOT NULL AND LCASE(alias2)='" + name + "' ) OR "
                    + " ( alias3 IS NOT NULL AND LCASE(alias3)='" + name + "' ) OR "
                    + " ( alias4 IS NOT NULL AND LCASE(alias4)='" + name + "' ) OR "
                    + " ( alias5 IS NOT NULL AND LCASE(alias5)='" + name + "' ) ) ";

        } else if (code.getEnglishName() != null) {
            String name = stringValue(code.getEnglishName()).toLowerCase();
            s += " AND ( ( english_name IS NOT NULL AND LCASE(english_name)='" + name + "' ) OR "
                    + " ( alias1 IS NOT NULL AND LCASE(alias1)='" + name + "' ) OR "
                    + " ( alias2 IS NOT NULL AND LCASE(alias2)='" + name + "' ) OR "
                    + " ( alias3 IS NOT NULL AND LCASE(alias3)='" + name + "' ) OR "
                    + " ( alias4 IS NOT NULL AND LCASE(alias4)='" + name + "' ) OR "
                    + " ( alias5 IS NOT NULL AND LCASE(alias5)='" + name + "' ) ) ";
        }
        return s;
    }

    public static String codeEqual(String value) {
        String v = stringValue(value).toLowerCase();
        return " ( ( code1 IS NOT NULL AND LCASE(code1)='" + v + "' ) OR "
                + " ( code2 IS NOT NULL AND LCASE(code2)='" + v + "' ) OR "
                + " ( code3 IS NOT NULL AND LCASE(code3)='" + v + "' ) OR "
                + " ( code4 IS NOT NULL AND LCASE(code4)='" + v + "' ) OR "
                + " ( code5 IS NOT NULL AND LCASE(code5)='" + v + "' ) )  ";
    }

    public static GeographyCode earth() {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setReadOnly(true);
            return earth(conn);
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return null;
        }
    }

    public static GeographyCode earth(Connection conn) {
        return readCode(conn, 1, false);
    }

    public static GeographyCode queryCode(String sql, boolean decodeAncestors) {
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setReadOnly(true);
            return queryCode(conn, sql, decodeAncestors);
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return null;
        }
    }

    public static GeographyCode queryCode(Connection conn, String sql, boolean decodeAncestors) {
        if (conn == null || sql == null) {
            return null;
        }
        try {
            GeographyCode code;
            try ( Statement statement = conn.createStatement()) {
                statement.setMaxRows(1);
                try ( ResultSet results = statement.executeQuery(sql)) {
                    if (results.next()) {
                        code = readCode(results);
                    } else {
                        return null;
                    }
                }
            }
            if (decodeAncestors && code != null) {
                decodeAncestors(conn, code);
            }
            return code;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return null;
        }
    }

    // this way is not accurate since multiple addresses can have same coordinate
    public static GeographyCode readCode(double longitude, double latitude, boolean decodeAncestors) {
        if (!validCoordinate(longitude, latitude)) {
            return null;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setReadOnly(true);
            GeographyCode code;
            try ( PreparedStatement statement = conn.prepareStatement(CoordinateQeury)) {
                statement.setDouble(1, longitude);
                statement.setDouble(2, latitude);
                code = readCode(conn, statement, decodeAncestors);
            }
            return code;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return null;
        }
    }

    public static GeographyCode readCode(long gcid, boolean decodeAncestors) {
        if (gcid <= 0) {
            return null;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setReadOnly(true);
            return readCode(conn, gcid, decodeAncestors);
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return null;
        }
    }

    public static GeographyCode readCode(Connection conn, long gcid, boolean decodeAncestors) {
        if (gcid < 0) {
            return null;
        }
        try {
            GeographyCode code;
            try ( PreparedStatement statement = conn.prepareStatement(GCidQeury)) {
                statement.setLong(1, gcid);
                code = readCode(conn, statement, decodeAncestors);
            }
            return code;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return null;
        }
    }

    public static GeographyCode readCode(int level, String name, boolean decodeAncestors) {
        if (level <= 0 || name == null) {
            return null;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setReadOnly(true);
            return readCode(conn, level, name, decodeAncestors);
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return null;
        }
    }

    public static GeographyCode readCode(Connection conn, int level, String name, boolean decodeAncestors) {
        if (level <= 0 || name == null) {
            return null;
        }
        try {
            GeographyCode code;
            try ( PreparedStatement statement = conn.prepareStatement(LevelNameQeury)) {
                statement.setInt(1, level);
                setNameParameters(statement, name, 1);
                code = readCode(conn, statement, decodeAncestors);
            }
            return code;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return null;
        }
    }

    public static GeographyCode readCode(GeographyCode code, boolean decodeAncestors) {
        if (code == null || !code.valid()) {
            return null;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setReadOnly(true);
            return readCode(conn, code, decodeAncestors);
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return null;
        }
    }

    public static boolean setCodeQueryParameters2(PreparedStatement statement, GeographyCode code) {
        if (statement == null || code == null) {
            return false;
        }
        try {
            fixLevels(code);
            int level = code.getLevel();
            String name;
            if (code.getChineseName() != null) {
                name = stringValue(code.getChineseName()).toLowerCase();
            } else if (code.getEnglishName() != null) {
                name = stringValue(code.getEnglishName()).toLowerCase();
            } else {
                return false;
            }
            statement.setShort(1, (short) level);
            statement.setLong(2, level > 2 ? code.getContinent() : -1);
            statement.setLong(3, level > 3 ? code.getCountry() : -1);
            statement.setLong(4, level > 4 ? code.getProvince() : -1);
            statement.setLong(5, level > 5 ? code.getCity() : -1);
            statement.setLong(6, level > 6 ? code.getCounty() : -1);
            statement.setLong(7, level > 7 ? code.getTown() : -1);
            statement.setLong(8, level > 8 ? code.getVillage() : -1);
            statement.setString(9, name);
            statement.setString(10, name);
            statement.setString(11, name);
            statement.setString(12, name);
            statement.setString(13, name);
            statement.setString(14, name);
            statement.setString(15, name);

            logger.debug(name);
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static GeographyCode readCode(Connection conn, GeographyCode code, boolean decodeAncestors) {
        if (conn == null || code == null || !code.valid()) {
            return null;
        }
        try {
            if (code.getGcid() > 0) {
                try ( PreparedStatement statement = conn.prepareStatement(GCidQeury)) {
                    statement.setLong(1, code.getGcid());
                    return readCode(conn, statement, decodeAncestors);
                }
            } else {
                int level = code.getLevel();
                String condition = "level=" + level;
                switch (level) {
                    case 3:
                        condition += " AND continent=" + code.getContinent();
                        break;
                    case 4:
                        condition += " AND continent=" + code.getContinent()
                                + " AND country=" + code.getCountry();
                        break;
                    case 5:
                        condition += " AND continent=" + code.getContinent()
                                + " AND country=" + code.getCountry()
                                + " AND province=" + code.getProvince();
                        break;
                    case 6:
                        condition += " AND continent=" + code.getContinent()
                                + " AND country=" + code.getCountry()
                                + " AND province=" + code.getProvince()
                                + " AND city=" + code.getCity();
                        break;
                    case 7:
                        condition += " AND country=" + code.getCountry()
                                + " AND province=" + code.getProvince()
                                + " AND city=" + code.getCity()
                                + " AND county=" + code.getCounty();
                        break;
                    case 8:
                        condition += " AND continent=" + code.getContinent()
                                + " AND country=" + code.getCountry()
                                + " AND province=" + code.getProvince()
                                + " AND city=" + code.getCity()
                                + " AND county=" + code.getCounty()
                                + " AND town=" + code.getTown();
                        break;
                    case 9:
                    case 10:
                        condition += " AND continent=" + code.getContinent()
                                + " AND country=" + code.getCountry()
                                + " AND province=" + code.getProvince()
                                + " AND city=" + code.getCity()
                                + " AND county=" + code.getCounty()
                                + " AND town=" + code.getTown()
                                + " AND village=" + code.getVillage();
                        break;
                }
                String nameEqual = "";
                if (code.getChineseName() != null) {
                    String name = stringValue(code.getChineseName()).toLowerCase();
                    nameEqual = " ( chinese_name IS NOT NULL AND LCASE(chinese_name)='" + name + "' ) OR "
                            + " ( alias1 IS NOT NULL AND LCASE(alias1)='" + name + "' ) OR "
                            + " ( alias2 IS NOT NULL AND LCASE(alias2)='" + name + "' ) OR "
                            + " ( alias3 IS NOT NULL AND LCASE(alias3)='" + name + "' ) OR "
                            + " ( alias4 IS NOT NULL AND LCASE(alias4)='" + name + "' ) OR "
                            + " ( alias5 IS NOT NULL AND LCASE(alias5)='" + name + "' ) ";
                }
                if (code.getEnglishName() != null) {
                    String name = stringValue(code.getEnglishName()).toLowerCase();
                    nameEqual = nameEqual.isBlank() ? "" : nameEqual + " OR ";
                    nameEqual += " ( english_name IS NOT NULL AND LCASE(english_name)='" + name + "' ) OR "
                            + " ( alias1 IS NOT NULL AND LCASE(alias1)='" + name + "' ) OR "
                            + " ( alias2 IS NOT NULL AND LCASE(alias2)='" + name + "' ) OR "
                            + " ( alias3 IS NOT NULL AND LCASE(alias3)='" + name + "' ) OR "
                            + " ( alias4 IS NOT NULL AND LCASE(alias4)='" + name + "' ) OR "
                            + " ( alias5 IS NOT NULL AND LCASE(alias5)='" + name + "' )  ";
                }
                if (nameEqual.isBlank()) {
                    return null;
                }
                String sql = "SELECT * FROM Geography_Code WHERE " + condition + " AND (" + nameEqual + ")";
                return queryCode(conn, sql, decodeAncestors);
            }
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return null;
        }
    }

    // Generrally, when location full name is need, "decodeAncestors" should be true
    public static GeographyCode readCode(Connection conn, PreparedStatement statement, boolean decodeAncestors) {
        if (conn == null || statement == null) {
            return null;
        }
        try {
            GeographyCode code;
            statement.setMaxRows(1);
            try ( ResultSet results = statement.executeQuery()) {
                if (results.next()) {
                    code = readCode(results);
                } else {
                    return null;
                }
            }
            if (decodeAncestors && code != null) {
                decodeAncestors(conn, code);
            }
            return code;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return null;
        }
    }

    public static GeographyCode readCode(Connection conn, ResultSet results, boolean decodeAncestors) {
        if (conn == null || results == null) {
            return null;
        }
        try {
            GeographyCode code = readCode(results);
            if (decodeAncestors && code != null) {
                decodeAncestors(conn, code);
            }
            return code;
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return null;
        }
    }

    public static GeographyCode decodeAncestors(GeographyCode code) {
        if (code == null) {
            return null;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setReadOnly(true);
            decodeAncestors(conn, code);
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return code;
    }

    public static void decodeAncestors(Connection conn, GeographyCode code) {
        if (conn == null || code == null) {
            return;
        }
        try {
            int level = code.getLevel();
            if (level < 3 || level > 10) {
                return;
            }
            try ( PreparedStatement statement = conn.prepareStatement(GCidQeury)) {
                if (code.getContinent() > 0) {
                    statement.setLong(1, code.getContinent());
                    try ( ResultSet cresults = statement.executeQuery()) {
                        if (cresults.next()) {
                            code.setContinentCode(readCode(cresults));
                        }
                    }
                }
                if (level < 4) {
                    return;
                }
                if (code.getCountry() > 0) {
                    statement.setLong(1, code.getCountry());
                    try ( ResultSet cresults = statement.executeQuery()) {
                        if (cresults.next()) {
                            code.setCountryCode(readCode(cresults));
                        }
                    }
                }

                if (level < 5) {
                    return;
                }
                if (code.getProvince() > 0) {
                    statement.setLong(1, code.getProvince());
                    try ( ResultSet presults = statement.executeQuery()) {
                        if (presults.next()) {
                            code.setProvinceCode(readCode(presults));
                        }
                    }
                }

                if (level < 6) {
                    return;
                }
                if (code.getCity() > 0) {
                    statement.setLong(1, code.getCity());
                    try ( ResultSet iresults = statement.executeQuery()) {
                        if (iresults.next()) {
                            code.setCityCode(readCode(iresults));
                        }
                    }
                }

                if (level < 7) {
                    return;
                }
                if (code.getCounty() > 0) {
                    statement.setLong(1, code.getCounty());
                    try ( ResultSet iresults = statement.executeQuery()) {
                        if (iresults.next()) {
                            code.setCountyCode(readCode(iresults));
                        }
                    }
                }

                if (level < 8) {
                    return;
                }
                if (code.getTown() > 0) {
                    statement.setLong(1, code.getTown());
                    try ( ResultSet iresults = statement.executeQuery()) {
                        if (iresults.next()) {
                            code.setTownCode(readCode(iresults));
                        }
                    }
                }

                if (level < 9) {
                    return;
                }
                if (code.getVillage() > 0) {
                    statement.setLong(1, code.getVillage());
                    try ( ResultSet iresults = statement.executeQuery()) {
                        if (iresults.next()) {
                            code.setVillageCode(readCode(iresults));
                        }
                    }
                }
            }

        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
        }
    }

    public static long readGCid(Connection conn, PreparedStatement statement) {
        if (conn == null || statement == null) {
            return -1;
        }
        try {
            statement.setMaxRows(1);
            try ( ResultSet results = statement.executeQuery()) {
                if (results.next()) {
                    return results.getLong("gcid");
                } else {
                    return -1;
                }
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
            return -1;
        }
    }

    public static GeographyCode readCode(ResultSet results) {
        if (results == null) {
            return null;
        }
        try {
            GeographyCode code = new GeographyCode();
            code.setGcid(results.getLong("gcid"));
            code.setPredefined(results.getShort("predefined") > 0);
            code.setLevel(results.getShort("level"));
            code.setLevelCode(new GeographyCodeLevel(code.getLevel()));
            code.setLongitude(results.getDouble("longitude"));
            code.setLatitude(results.getDouble("latitude"));
            code.setChineseName(results.getString("chinese_name"));
            code.setEnglishName(results.getString("english_name"));
            code.setCode1(results.getString("code1"));
            code.setCode2(results.getString("code2"));
            code.setCode3(results.getString("code3"));
            code.setCode4(results.getString("code4"));
            code.setCode5(results.getString("code5"));
            code.setAlias1(results.getString("alias1"));
            code.setAlias2(results.getString("alias2"));
            code.setAlias3(results.getString("alias3"));
            code.setAlias4(results.getString("alias4"));
            code.setAlias5(results.getString("alias5"));
            code.setArea(results.getLong("area"));
            code.setPopulation(results.getLong("population"));
            code.setComments(results.getString("comments"));
            code.setContinent(results.getLong("continent"));
            code.setCountry(results.getLong("country"));
            code.setProvince(results.getLong("province"));
            code.setCity(results.getLong("city"));
            code.setCounty(results.getLong("county"));
            code.setTown(results.getLong("town"));
            code.setVillage(results.getLong("village"));
            code.setBuilding(results.getLong("building"));
            return code;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return null;
        }
    }

    public static List<GeographyCode> queryCodes(String sql, boolean decodeAncestors) {
        List<GeographyCode> codes = new ArrayList<>();
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setReadOnly(true);
            codes = queryCodes(conn, sql, decodeAncestors);
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return codes;
    }

    public static List<GeographyCode> queryCodes(Connection conn, String sql, boolean decodeAncestors) {
        List<GeographyCode> codes = new ArrayList<>();
        try {
            try ( ResultSet results = conn.createStatement().executeQuery(sql)) {
                while (results.next()) {
                    GeographyCode code = readCode(results);
                    codes.add(code);
                }
            }
            for (GeographyCode code : codes) {
                decodeAncestors(conn, code);
            }
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
        }
        return codes;
    }

    public static List<GeographyCode> readAll(boolean decodeAncestors) {
        return readMax(0, decodeAncestors);
    }

    public static List<GeographyCode> readMax(int max, boolean decodeAncestors) {
        List<GeographyCode> codes = new ArrayList<>();
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setReadOnly(true);
            try ( PreparedStatement statement = conn.prepareStatement(AllQeury)) {
                if (max > 0) {
                    statement.setMaxRows(max);
                }
                codes = readCodes(conn, statement, decodeAncestors);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return codes;
    }

    public static List<GeographyCode> readRangle(long offset, long number, boolean decodeAncestors) {
        List<GeographyCode> codes = new ArrayList<>();
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setReadOnly(true);
            try ( PreparedStatement statement = conn.prepareStatement(PageQeury)) {
                statement.setLong(1, offset);
                statement.setLong(2, number);
                codes = readCodes(conn, statement, decodeAncestors);
            }
        } catch (Exception e) {
            failed(e);
            // logger.debug(e.toString());
        }
        return codes;
    }

    public static List<GeographyCode> readCodes(Connection conn, PreparedStatement statement, boolean decodeAncestors) {
        List<GeographyCode> codes = new ArrayList<>();
        try {
            try ( ResultSet results = statement.executeQuery()) {
                while (results.next()) {
                    GeographyCode code = readCode(results);
                    codes.add(code);
                }
            }
            for (GeographyCode code : codes) {
                decodeAncestors(conn, code);
            }
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
        }
        return codes;
    }

    public static boolean write(GeographyCode code) {
        if (code == null) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            return write(conn, code);
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean write(Connection conn, GeographyCode code) {
        if (code == null || conn == null || !code.valid()) {
            return false;
        }
        try {
            GeographyCode exist = readCode(conn, code, false);
            if (exist != null) {
                code.setGcid(exist.getGcid());
                update(conn, code);
            } else {
                insert(conn, code);
            }
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean write(List<GeographyCode> codes) {
        if (codes == null || codes.isEmpty()) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login);
                 PreparedStatement update = conn.prepareStatement(Update);
                 PreparedStatement insert = conn.prepareStatement(Insert);) {
            conn.setAutoCommit(false);
            for (GeographyCode code : codes) {
                GeographyCode exist = readCode(conn, code, false);
                if (exist != null) {
                    code.setGcid(exist.getGcid());
                    update(conn, update, code);

                } else {
                    insert(conn, insert, code);
                }
            }
            conn.commit();
            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean insert(GeographyCode code) {
        if (code == null) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            return insert(conn, code);
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static void fixLevels(GeographyCode code) {
        if (code == null || code.getGcid() <= 0) {
            return;
        }
        switch (code.getLevel()) {
            case 1:
                code.setContinent(-1);
                code.setCountry(-1);
                code.setProvince(-1);
                code.setCity(-1);
                code.setCounty(-1);
                code.setTown(-1);
                code.setVillage(-1);
                code.setBuilding(-1);
                break;
            case 2:
                code.setContinent(code.getGcid());
                code.setCountry(-1);
                code.setProvince(-1);
                code.setCity(-1);
                code.setCounty(-1);
                code.setTown(-1);
                code.setVillage(-1);
                code.setBuilding(-1);
                break;
            case 3:
                code.setCountry(code.getGcid());
                code.setProvince(-1);
                code.setCity(-1);
                code.setCounty(-1);
                code.setTown(-1);
                code.setVillage(-1);
                code.setBuilding(-1);
                break;
            case 4:
                code.setProvince(code.getGcid());
                code.setCity(-1);
                code.setCounty(-1);
                code.setTown(-1);
                code.setVillage(-1);
                code.setBuilding(-1);
                break;
            case 5:
                code.setCity(code.getGcid());
                code.setCounty(-1);
                code.setTown(-1);
                code.setVillage(-1);
                code.setBuilding(-1);
                break;
            case 6:
                code.setCounty(code.getGcid());
                code.setTown(-1);
                code.setVillage(-1);
                code.setBuilding(-1);
                break;
            case 7:
                code.setTown(code.getGcid());
                code.setVillage(-1);
                code.setBuilding(-1);
                break;
            case 8:
                code.setVillage(code.getGcid());
                code.setBuilding(-1);
                break;
            case 9:
                code.setBuilding(code.getGcid());
                break;
        }
    }

    public static long generateGCid(Connection conn, int level) {
        try {
            long gcid = -1;
            try ( ResultSet results = conn.createStatement().executeQuery(
                    "SELECT max(gcid) FROM Geography_Code WHERE level=" + level)) {
                if (results.next()) {
                    gcid = results.getInt(1) + 1;
                }
            }
            try ( ResultSet results = conn.createStatement().executeQuery(
                    "SELECT gcid FROM Geography_Code where gcid=" + gcid)) {
                if (results.next()) {
                    gcid = -1;
                }
            }
            if (gcid == -1) {
                try ( ResultSet results = conn.createStatement().executeQuery(
                        "SELECT max(gcid) FROM Geography_Code")) {
                    if (results.next()) {
                        gcid = Math.max(2000000, results.getInt(1) + 1);
                    }
                }

                if (gcid >= 0) {
                    String sql = "ALTER TABLE Geography_Code ALTER COLUMN gcid RESTART WITH " + (gcid + 1);
                    try ( Statement statement = conn.createStatement()) {
                        statement.executeUpdate(sql);
                    }
                }
            }
            return gcid;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return -1;
        }
    }

    public static boolean insert(Connection conn, GeographyCode code) {
        if (conn == null || code == null || !code.valid()) {
            return false;
        }
        try ( PreparedStatement statement = conn.prepareStatement(Insert)) {
            return insert(conn, statement, code);
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean insert(Connection conn, PreparedStatement statement, GeographyCode code) {
        if (conn == null || statement == null || code == null || !code.valid()) {
            return false;
        }
        try {
            int level = code.getLevel();
            if (code.getGcid() <= 0) {
                long gcid = generateGCid(conn, level);
                code.setGcid(gcid);
            }
            fixLevels(code);
            statement.setLong(1, code.getGcid());
            statement.setShort(2, (short) code.getLevel());
            statement.setShort(3, code.isPredefined() ? Short.parseShort("1") : Short.parseShort("0"));
            statement.setDouble(4, code.getLongitude());
            statement.setDouble(5, code.getLatitude());
            if (code.getChineseName() == null) {
                statement.setNull(6, Types.VARCHAR);
            } else {
                statement.setString(6, code.getChineseName());
            }
            if (code.getEnglishName() == null) {
                statement.setNull(7, Types.VARCHAR);
            } else {
                statement.setString(7, code.getEnglishName());
            }
            if (code.getCode1() == null) {
                statement.setNull(8, Types.VARCHAR);
            } else {
                statement.setString(8, code.getCode1());
            }
            if (code.getCode2() == null) {
                statement.setNull(9, Types.VARCHAR);
            } else {
                statement.setString(9, code.getCode2());
            }
            if (code.getCode3() == null) {
                statement.setNull(10, Types.VARCHAR);
            } else {
                statement.setString(10, code.getCode3());
            }
            if (code.getCode4() == null) {
                statement.setNull(11, Types.VARCHAR);
            } else {
                statement.setString(11, code.getCode4());
            }
            if (code.getCode5() == null) {
                statement.setNull(12, Types.VARCHAR);
            } else {
                statement.setString(12, code.getCode5());
            }
            if (code.getAlias1() == null) {
                statement.setNull(13, Types.VARCHAR);
            } else {
                statement.setString(13, code.getAlias1());
            }
            if (code.getAlias2() == null) {
                statement.setNull(14, Types.VARCHAR);
            } else {
                statement.setString(14, code.getAlias2());
            }
            if (code.getAlias3() == null) {
                statement.setNull(15, Types.VARCHAR);
            } else {
                statement.setString(15, code.getAlias3());
            }
            if (code.getAlias4() == null) {
                statement.setNull(16, Types.VARCHAR);
            } else {
                statement.setString(16, code.getAlias4());
            }
            if (code.getAlias5() == null) {
                statement.setNull(17, Types.VARCHAR);
            } else {
                statement.setString(17, code.getAlias5());
            }
            statement.setLong(18, code.getArea());
            statement.setLong(19, code.getPopulation());
            if (code.getComments() == null) {
                statement.setNull(20, Types.VARCHAR);
            } else {
                statement.setString(20, code.getComments());
            }
            statement.setLong(21, code.getContinent());
            statement.setLong(22, code.getCountry());
            statement.setLong(23, code.getProvince());
            statement.setLong(24, code.getCity());
            statement.setLong(25, code.getCounty());
            statement.setLong(26, code.getTown());
            statement.setLong(27, code.getVillage());
            statement.setLong(28, code.getBuilding());
            statement.executeUpdate();

            return true;
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
//            logger.debug(sql);
            return false;
        }
    }

    public static boolean update(Connection conn, GeographyCode code) {
        if (conn == null || code == null || !code.valid()) {
            return false;
        }
        try ( PreparedStatement statement = conn.prepareStatement(Update)) {
            return update(conn, statement, code);
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean update(Connection conn, PreparedStatement statement, GeographyCode code) {
        if (conn == null || statement == null || code == null || !code.valid()) {
            return false;
        }
        try {
            if (code.getGcid() <= 0) {
                GeographyCode exist = readCode(conn, code, false);
                if (exist == null) {
                    return insert(conn, code);
                }
                code.setGcid(exist.getGcid());
            }
            fixLevels(code);
            statement.setShort(1, (short) code.getLevel());
            statement.setDouble(2, code.getLongitude());
            statement.setDouble(3, code.getLatitude());
            statement.setShort(4, code.isPredefined() ? Short.parseShort("1") : Short.parseShort("0"));
            if (code.getChineseName() == null) {
                statement.setNull(5, Types.VARCHAR);
            } else {
                statement.setString(5, code.getChineseName());
            }
            if (code.getEnglishName() == null) {
                statement.setNull(6, Types.VARCHAR);
            } else {
                statement.setString(6, code.getEnglishName());
            }
            if (code.getCode1() == null) {
                statement.setNull(7, Types.VARCHAR);
            } else {
                statement.setString(7, code.getCode1());
            }
            if (code.getCode2() == null) {
                statement.setNull(8, Types.VARCHAR);
            } else {
                statement.setString(8, code.getCode2());
            }
            if (code.getCode3() == null) {
                statement.setNull(9, Types.VARCHAR);
            } else {
                statement.setString(9, code.getCode3());
            }
            if (code.getCode4() == null) {
                statement.setNull(10, Types.VARCHAR);
            } else {
                statement.setString(10, code.getCode4());
            }
            if (code.getCode5() == null) {
                statement.setNull(11, Types.VARCHAR);
            } else {
                statement.setString(11, code.getCode5());
            }
            if (code.getAlias1() == null) {
                statement.setNull(12, Types.VARCHAR);
            } else {
                statement.setString(12, code.getAlias1());
            }
            if (code.getAlias2() == null) {
                statement.setNull(13, Types.VARCHAR);
            } else {
                statement.setString(13, code.getAlias2());
            }
            if (code.getAlias3() == null) {
                statement.setNull(14, Types.VARCHAR);
            } else {
                statement.setString(14, code.getAlias3());
            }
            if (code.getAlias4() == null) {
                statement.setNull(15, Types.VARCHAR);
            } else {
                statement.setString(15, code.getAlias4());
            }
            if (code.getAlias5() == null) {
                statement.setNull(16, Types.VARCHAR);
            } else {
                statement.setString(16, code.getAlias5());
            }
            statement.setLong(17, code.getArea());
            statement.setLong(18, code.getPopulation());
            if (code.getComments() == null) {
                statement.setNull(19, Types.VARCHAR);
            } else {
                statement.setString(19, code.getComments());
            }
            statement.setLong(20, code.getContinent());
            statement.setLong(21, code.getCountry());
            statement.setLong(22, code.getProvince());
            statement.setLong(23, code.getCity());
            statement.setLong(24, code.getCounty());
            statement.setLong(25, code.getTown());
            statement.setLong(26, code.getVillage());
            statement.setLong(27, code.getBuilding());
            statement.setLong(28, code.getGcid());
            statement.executeUpdate();

            return true;
        } catch (Exception e) {
            failed(e);
//            logger.debug(e.toString());
            return false;
        }
    }

    public static boolean delete(GeographyCode code) {
        if (code == null || !code.valid() || code.isPredefined()) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            try ( PreparedStatement statement = conn.prepareStatement(Delete)) {
                return delete(conn, statement, code);
            }
        } catch (Exception e) {
            failed(e);
//            // logger.debug(e.toString());
            return false;
        }
    }

    public static boolean delete(Connection conn, PreparedStatement statement, GeographyCode code) {
        if (statement == null || code == null || !code.valid() || code.isPredefined()) {
            return false;
        }
        try {
            GeographyCode exist = readCode(conn, code, false);
            if (exist == null || exist.isPredefined()) {
                return false;
            }
            statement.setLong(1, exist.getGcid());
            statement.executeUpdate();
            return true;
        } catch (Exception e) {
            failed(e);
//            // logger.debug(e.toString());
            return false;
        }
    }

    public static boolean delete(List<GeographyCode> codes) {
        if (codes == null || codes.isEmpty()) {
            return false;
        }
        try ( Connection conn = DriverManager.getConnection(protocol + dbHome() + login)) {
            conn.setAutoCommit(false);
            try ( PreparedStatement statement = conn.prepareStatement(Delete)) {
                for (GeographyCode code : codes) {
                    delete(conn, statement, code);
                }
            }
            conn.commit();
            return true;
        } catch (Exception e) {
            failed(e);
//            // logger.debug(e.toString());
            return false;
        }
    }

    public static GeographyCode getParent(GeographyCode code, boolean decodeAncestors) {
        if (code == null) {
            return null;
        }
        switch (code.getLevel()) {
            case 2:
                return earth();
            case 3: {
                GeographyCode continentCode = code.getContinentCode();
                if (continentCode == null) {
                    if (code.getContinent() >= 2 && code.getContinent() <= 8) {
                        continentCode = readCode(code.getContinent(), decodeAncestors);
                    } else {
                        continentCode = readCode(9, decodeAncestors);
                    }
                    code.setContinentCode(continentCode);
                }
                return continentCode;
            }
            case 4: {
                GeographyCode countryCode = code.getCountryCode();
                if (countryCode == null) {
                    countryCode = readCode(code.getCountry(), decodeAncestors);
                    code.setCountryCode(countryCode);
                }
                return countryCode;
            }
            case 5: {
                if (code.getProvince() > 0) {
                    if (code.getProvinceCode() != null) {
                        return code.getProvinceCode();
                    } else {
                        GeographyCode provinceCode = readCode(code.getProvince(), decodeAncestors);
                        code.setProvinceCode(provinceCode);
                        return provinceCode;
                    }
                } else {
                    GeographyCode countryCode = code.getCountryCode();
                    if (countryCode == null) {
                        countryCode = readCode(code.getCountry(), decodeAncestors);
                        code.setCountryCode(countryCode);
                    }
                    return countryCode;
                }
            }
            case 6: {
                if (code.getCity() > 0) {
                    if (code.getCityCode() != null) {
                        return code.getCityCode();
                    } else {
                        GeographyCode cityCode = readCode(code.getCity(), decodeAncestors);
                        code.setCityCode(cityCode);
                        return cityCode;
                    }
                } else if (code.getProvince() > 0) {
                    if (code.getProvinceCode() != null) {
                        return code.getProvinceCode();
                    } else {
                        GeographyCode provinceCode = readCode(code.getProvince(), decodeAncestors);
                        code.setProvinceCode(provinceCode);
                        return provinceCode;
                    }
                } else {
                    GeographyCode countryCode = code.getCountryCode();
                    if (countryCode == null) {
                        countryCode = readCode(code.getCountry(), decodeAncestors);
                        code.setCountryCode(countryCode);
                    }
                    return countryCode;
                }
            }
            case 7:
                if (code.getCounty() > 0) {
                    if (code.getCountyCode() != null) {
                        return code.getCountyCode();
                    } else {
                        GeographyCode countyCode = readCode(code.getCounty(), decodeAncestors);
                        code.setCountyCode(countyCode);
                        return countyCode;
                    }
                } else if (code.getCity() > 0) {
                    if (code.getCityCode() != null) {
                        return code.getCityCode();
                    } else {
                        GeographyCode cityCode = readCode(code.getCity(), decodeAncestors);
                        code.setCityCode(cityCode);
                        return cityCode;
                    }
                } else if (code.getProvince() > 0) {
                    if (code.getProvinceCode() != null) {
                        return code.getProvinceCode();
                    } else {
                        GeographyCode provinceCode = readCode(code.getProvince(), decodeAncestors);
                        code.setProvinceCode(provinceCode);
                        return provinceCode;
                    }
                } else {
                    GeographyCode countryCode = code.getCountryCode();
                    if (countryCode == null) {
                        countryCode = readCode(code.getCountry(), decodeAncestors);
                        code.setCountryCode(countryCode);
                    }
                    return countryCode;
                }
            case 8:
                if (code.getTown() > 0) {
                    if (code.getTownCode() != null) {
                        return code.getTownCode();
                    } else {
                        GeographyCode townCode = readCode(code.getTown(), decodeAncestors);
                        code.setTownCode(townCode);
                        return townCode;
                    }
                } else if (code.getCounty() > 0) {
                    if (code.getCountyCode() != null) {
                        return code.getCountyCode();
                    } else {
                        GeographyCode countyCode = readCode(code.getCounty(), decodeAncestors);
                        code.setCountyCode(countyCode);
                        return countyCode;
                    }
                } else if (code.getCity() > 0) {
                    if (code.getCityCode() != null) {
                        return code.getCityCode();
                    } else {
                        GeographyCode cityCode = readCode(code.getCity(), decodeAncestors);
                        code.setCityCode(cityCode);
                        return cityCode;
                    }
                } else if (code.getProvince() > 0) {
                    if (code.getProvinceCode() != null) {
                        return code.getProvinceCode();
                    } else {
                        GeographyCode provinceCode = readCode(code.getProvince(), decodeAncestors);
                        code.setProvinceCode(provinceCode);
                        return provinceCode;
                    }
                } else {
                    GeographyCode countryCode = code.getCountryCode();
                    if (countryCode == null) {
                        countryCode = readCode(code.getCountry(), decodeAncestors);
                        code.setCountryCode(countryCode);
                    }
                    return countryCode;
                }
            case 9:
                if (code.getVillage() > 0) {
                    if (code.getVillageCode() != null) {
                        return code.getVillageCode();
                    } else {
                        GeographyCode villageCode = readCode(code.getVillage(), decodeAncestors);
                        code.setVillageCode(villageCode);
                        return villageCode;
                    }
                } else if (code.getTown() > 0) {
                    if (code.getTownCode() != null) {
                        return code.getTownCode();
                    } else {
                        GeographyCode townCode = readCode(code.getTown(), decodeAncestors);
                        code.setTownCode(townCode);
                        return townCode;
                    }
                } else if (code.getCounty() > 0) {
                    if (code.getCountyCode() != null) {
                        return code.getCountyCode();
                    } else {
                        GeographyCode countyCode = readCode(code.getCounty(), decodeAncestors);
                        code.setCountyCode(countyCode);
                        return countyCode;
                    }
                } else if (code.getCity() > 0) {
                    if (code.getCityCode() != null) {
                        return code.getCityCode();
                    } else {
                        GeographyCode cityCode = readCode(code.getCity(), decodeAncestors);
                        code.setCityCode(cityCode);
                        return cityCode;
                    }
                } else if (code.getProvince() > 0) {
                    if (code.getProvinceCode() != null) {
                        return code.getProvinceCode();
                    } else {
                        GeographyCode provinceCode = readCode(code.getProvince(), decodeAncestors);
                        code.setProvinceCode(provinceCode);
                        return provinceCode;
                    }
                } else {
                    GeographyCode countryCode = code.getCountryCode();
                    if (countryCode == null) {
                        countryCode = readCode(code.getCountry(), decodeAncestors);
                        code.setCountryCode(countryCode);
                    }
                    return countryCode;
                }
            default:
                return earth();
        }
    }

    public static List<Long> haveChildren(Connection conn, List<GeographyCode> nodes) {
        List<Long> haveChildren = new ArrayList();
        if (conn == null || nodes == null) {
            return haveChildren;
        }
        try {
            for (GeographyCode code : nodes) {
                GeographyCodeLevel levelCode = code.getLevelCode();
                int level = code.getLevel();
                String levelKey = levelCode.getKey();
                long gcid = code.getGcid();
                final String sql1 = "SELECT gcid FROM Geography_Code WHERE "
                        + " level=" + (level + 1) + " AND " + levelKey + "=" + gcid
                        + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                try ( Statement statement = conn.createStatement()) {
                    statement.setMaxRows(1);
                    try ( ResultSet results = statement.executeQuery(sql1)) {
                        if (results.next()) {
                            haveChildren.add(gcid);
                            continue;
                        }
                    }
                }
                if (level >= 9) {
                    continue;
                }
                final String sql2 = "SELECT gcid FROM Geography_Code WHERE "
                        + " level>" + (level + 1) + " AND level<=9 AND " + levelKey + "=" + gcid
                        + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                try ( Statement statement = conn.createStatement()) {
                    statement.setMaxRows(1);
                    try ( ResultSet results = statement.executeQuery(sql2)) {
                        if (results.next()) {
                            haveChildren.add(gcid);
                        }
                    }
                }
            }
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
        }
        return haveChildren;
    }

    public static List<Long> haveChildren1(Connection conn, List<GeographyCode> codes) {
        List<Long> haveChildren = new ArrayList();
        if (conn == null || codes == null) {
            return haveChildren;
        }
        try {
            Map<Integer, List<Long>> levels = new HashMap<>();
            for (GeographyCode code : codes) {
                int level = code.getLevel();
                List<Long> levelCodes = levels.get(level);
                if (levelCodes == null) {
                    levelCodes = new ArrayList();
                    levels.put(level, levelCodes);
                }
                levelCodes.add(code.getGcid());
            }
            for (Integer level : levels.keySet()) {
                List<Long> levelCodes = levels.get(level);
                if (levelCodes == null || levelCodes.isEmpty()) {
                    continue;
                }
                final String sql;
                switch (level) {
                    case 2:
                        sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>2 AND level<=9 AND continent=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        break;
                    case 3:
                        sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>3 AND level<=9 AND country=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        break;
                    case 4:
                        sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>4 AND level<=9 AND province=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        break;
                    case 5:
                        sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>5 AND level<=9 AND city=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        break;
                    case 6:
                        sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>6 AND level<=9 AND county=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        break;
                    case 7:
                        sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>7 AND level<=9 AND town=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        break;
                    case 8:
                        sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level=9 AND village=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        break;
                    default:
                        continue;
                }
                try ( PreparedStatement statement = conn.prepareStatement(sql)) {
                    for (long gcid : levelCodes) {
                        statement.setLong(1, gcid);
                        try ( ResultSet results = statement.executeQuery()) {
                            if (results.next()) {
                                haveChildren.add(gcid);
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
        }
        return haveChildren;
    }

    public static List<Long> haveChildren2(Connection conn, List<GeographyCode> codes) {
        List<Long> haveChildren = new ArrayList();
        if (conn == null || codes == null) {
            return haveChildren;
        }
        try {
            Map<Integer, List<GeographyCode>> levels = new HashMap<>();
            for (GeographyCode code : codes) {
                int level = code.getLevel();
                List<GeographyCode> levelCodes = levels.get(level);
                if (levelCodes == null) {
                    levelCodes = new ArrayList();
                    levels.put(level, levelCodes);
                }
                levelCodes.add(code);
            }
            for (Integer level : levels.keySet()) {
                List<GeographyCode> levelCodes = levels.get(level);
                if (levelCodes == null || levelCodes.isEmpty()) {
                    continue;
                }
                switch (level) {
                    case 2: {
                        final String sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>2 AND level<=9 AND continent=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        try ( PreparedStatement statement = conn.prepareStatement(sql)) {
                            for (GeographyCode code : levelCodes) {
                                statement.setLong(1, code.getGcid());
                                try ( ResultSet results = statement.executeQuery()) {
                                    if (results.next()) {
                                        haveChildren.add(code.getGcid());
                                    }
                                }
                            }
                        }
                    }
                    break;
                    case 3: {
                        final String sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>3 AND level<=9 AND continent=? "
                                + " AND country=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        try ( PreparedStatement statement = conn.prepareStatement(sql)) {
                            for (GeographyCode code : levelCodes) {
                                statement.setLong(1, code.getContinent());
                                statement.setLong(2, code.getGcid());
                                try ( ResultSet results = statement.executeQuery()) {
                                    if (results.next()) {
                                        haveChildren.add(code.getGcid());
                                    }
                                }
                            }
                        }
                    }
                    break;
                    case 4: {
                        final String sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>4 AND level<=9 AND continent=? "
                                + " AND country=? AND province=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        try ( PreparedStatement statement = conn.prepareStatement(sql)) {
                            for (GeographyCode code : levelCodes) {
                                statement.setLong(1, code.getContinent());
                                statement.setLong(2, code.getCountry());
                                statement.setLong(3, code.getGcid());
                                try ( ResultSet results = statement.executeQuery()) {
                                    if (results.next()) {
                                        haveChildren.add(code.getGcid());
                                    }
                                }
                            }
                        }
                    }
                    break;
                    case 5: {
                        final String sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>5 AND level<=9 AND continent=? "
                                + " AND country=? AND province=? AND city=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        try ( PreparedStatement statement = conn.prepareStatement(sql)) {
                            for (GeographyCode code : levelCodes) {
                                statement.setLong(1, code.getContinent());
                                statement.setLong(2, code.getCountry());
                                statement.setLong(3, code.getProvince());
                                statement.setLong(4, code.getGcid());
                                try ( ResultSet results = statement.executeQuery()) {
                                    if (results.next()) {
                                        haveChildren.add(code.getGcid());
                                    }
                                }
                            }
                        }
                    }
                    break;
                    case 6: {
                        final String sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>6 AND level<=9 AND continent=? "
                                + " AND country=? AND province=? AND city=? "
                                + "AND county=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        try ( PreparedStatement statement = conn.prepareStatement(sql)) {
                            for (GeographyCode code : levelCodes) {
                                statement.setLong(1, code.getContinent());
                                statement.setLong(2, code.getCountry());
                                statement.setLong(3, code.getProvince());
                                statement.setLong(4, code.getCity());
                                statement.setLong(5, code.getGcid());
                                try ( ResultSet results = statement.executeQuery()) {
                                    if (results.next()) {
                                        haveChildren.add(code.getGcid());
                                    }
                                }
                            }
                        }
                    }
                    break;
                    case 7: {
                        final String sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level>7 AND level<=9 AND continent=? "
                                + " AND country=? AND province=? AND city=? "
                                + "AND county=? AND town=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        try ( PreparedStatement statement = conn.prepareStatement(sql)) {
                            for (GeographyCode code : levelCodes) {
                                statement.setLong(1, code.getContinent());
                                statement.setLong(2, code.getCountry());
                                statement.setLong(3, code.getProvince());
                                statement.setLong(4, code.getCity());
                                statement.setLong(5, code.getCounty());
                                statement.setLong(6, code.getGcid());
                                try ( ResultSet results = statement.executeQuery()) {
                                    if (results.next()) {
                                        haveChildren.add(code.getGcid());
                                    }
                                }
                            }
                        }
                    }
                    break;
                    case 8: {
                        final String sql = "SELECT gcid FROM Geography_Code WHERE "
                                + " level=9 AND continent=? "
                                + " AND country=? AND province=? AND city=? "
                                + "AND county=? AND town=? AND village=? "
                                + " OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY";
                        try ( PreparedStatement statement = conn.prepareStatement(sql)) {
                            for (GeographyCode code : levelCodes) {
                                statement.setLong(1, code.getContinent());
                                statement.setLong(2, code.getCountry());
                                statement.setLong(3, code.getProvince());
                                statement.setLong(4, code.getCity());
                                statement.setLong(5, code.getCounty());
                                statement.setLong(6, code.getTown());
                                statement.setLong(7, code.getGcid());
                                try ( ResultSet results = statement.executeQuery()) {
                                    if (results.next()) {
                                        haveChildren.add(code.getGcid());
                                    }
                                }
                            }
                        }
                    }
                    break;
                }
            }
        } catch (Exception e) {
            failed(e);
            logger.debug(e.toString());
        }
        return haveChildren;
    }

    public static boolean migrate63() {
        int size = TableGeographyCode.size();
        if (size > 0) {
            File tmpFile = new File(AppVariables.MyboxDataPath + File.separator + "data"
                    + File.separator + "Geography_Code" + (new Date().getTime()) + ".txt");
            tmpFile.mkdirs();
            DerbyBase.exportData("Geography_Code", tmpFile.getAbsolutePath());
            AppVariables.setSystemConfigValue("GeographyCodeBackup6.3", tmpFile.getAbsolutePath());
        }
        new TableGeographyCode().drop();
        new TableGeographyCode().init();

        return true;
    }

}
